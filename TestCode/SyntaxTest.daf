typedef TokenType := class {
	text:&char;
	special:boolean;
	make:=constructor(text:&char, special:boolean) {
		this.text = text;
		this.special = special;
	};
	nonSpecial:=constructor(text:&char) {
		this.text = text;
		this.special = false;
	}
}

let /*mut*/ TokenTypes:[3]TokenType=TokenType {
	PUB = TokenType.make("pub", false),
	BITWISE_AND, ADRESS = nonSpecial("&"),
	EOF = make("EOF", true)
};

//mut means the elements inside are mutable
//The size is a part of the type
//This means you can use length_of() at compiletime
let mut MyArray:TokenType[3]=TokenType[]{nonSpecial("let"),nonSpecial("def"),nonSpecial("mut)};

let mut TokenTypePtrs:=&TokenType[] {

typedef UniquePtr := class<T> {
	target:&mut T;
	
	def access:=@target;
	def access2:=inline():T {
		return @target;
	};
	def access3:=inline ():T @target;
}

def main:=(argc:int, argv:char[][]):int {
	let mut a := timesTwo<34>;	
}
