import DafCompiler;

pub def build:=(params:[][]char) {
    DafCompiler.include("MyDafLibrary"); //lets the def daf files be loaded
    DafCompiler.include("myModule/include"); //Lets def daf files be loaded
    DafCompiler.include("src/");
    DafCompiler.addSourceRec("havard.Main", "src/");
    DafCompiler.setHeaderOutputWithImport("out/include", "../lib/MyLib.a");

    DafCompiler.run("havard.Main.main()"); //Why not
    DafCompiler.makeExecutable("bin/MyProgram");
    DafCompiler.makeStaticLibrary("lib/MyLib.a"); //Compiles but doesn't link
    DafCompiler.makeSharedLibrary("lib/MyShared.so.1.2", "MyShared.so.1.4.5"); //Compiles into a shared library
};

/*
=======Basic idea=======
You run a jai file and one method in it.
The file imports DafCompiler.
The method you run may take a [][]char
You use the "compiler" structure
You add include directories that can be imported
You add library folders that are searched for when imported
You compile one file, or one file recursivly with a folder constraint
*/

