* My OCaml Adventure
Before you design a programming language you should probably know several languages following different paradigms.
I'd never tried functional programming before, and seeing as the LLVM tutorial was avaliable in it,
OCaml seemed like a great place to start.

** The packages I installed
Keep in mind you don't need all these to build the compiler
*** Pacman on Manjaro (Arch Linux)
- ocaml
- llvm-ocaml
- opam
- ocaml-compiler-libs
- ocaml-findlib
*** Opam
=opam init=
=eval `opam config env`=
Add to .bashrc: =. /home/haavard/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true=
=opam switch 4.06.1= NB!: Takes forever
*** Build system
=opam install oasis=

*** Emacs mode
=opam install ocp-indent=
=opam install merlin=
Restart emacs server

* My setup (oasis)
Source: https://ocaml.org/learn/tutorials/setting_up_with_oasis.html
I'm sort of guessing this only has to be done once, but I'd like to save the instructions.
=oasis setup -setup-update dynamic=
This generates =setup.ml=, =Makefile= and the =configure= script, which should be checked into git

* Clean build (even cleaner than git clean)
** Alternative to 'make clean'
Removing files made by 'make', which should all be .gitignored
=rm _build -r=
=rm dafc_main.native setup.data setup.log=
** Removing files generated by oasis
Changes to the =_oasis= file seem to be read whenever you run make, but these are the files generated
=rm setup.ml Makefile configure=

* Resources used:
Learned oasis from here: https://ocaml.org/learn/tutorials/get_up_and_running.html
