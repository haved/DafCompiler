#+TITLE: Things that need explanation

* Intro
So it's no secret that I'm not particularly knowledgeable when it comes to languages and compilers,
and this compiler is the largest and most complicated piece of software I've ever tried writing.
With the language design and compiler code base being as volatile as they are,
my ability to write clean code is put to the test.
Here I'll note the parts of the code base in particular need of explanation.
If you want to understand anything at all, I recommend you start at the main method.
* The Codebase
** Identifiers
The _ identifier is turned into an identifier with length 0 by the lexer.
This can be problematic as by no means all identifiers can be underscores.
In the future I might make some system where identifiers get assigned numbers from the lexer,
but then you would need a bidirectional map for printing proper error messages.
See github issue #4 to see if I ever did do this
** Namespaces, Namedefs and NameScopes
A Namespace is anything that contains named definitions, so both a NameScopeExpression (global, unordered), and a normal Scope (ordered definitions and statements) count.
Even a FunctionType is a Namespace for it's parameters.
The NamespaceStack is used when resolving references in the language. It is pushed and popped when entering NameScopes, normal Scopes and Function bodies.
Namedefs are definitions to NameScopeExpressions, a NameScope being one of such, import declarations being another option.
The namedef assigns a name to the NameScopeExpression, allowing you to put them withing each other and reference one another.
with the difference being not all identifiers in the Scope being added at once, but rather as you go.
** Concretable
*** TODO Write this
** The =try= prefix in function names
It means we won't print an error message upon a failed attempt at doing whatever it is the function tries to do. Instead you'll get a null pointer or something similar
Note that this rule isn't always followed
* Optimizations
** Strings as integers
In the future we should definitely turn identifiers to indecies in a map, saving strings from moving about.
Github issue #4
** Binary search for tokens
We don't want to compare every word with all reserved words.
Github issue #7
** The Concretable stuff
It's n log n, which is good without having a vector in every single Concretable
Doing it that way would be O(n) I think, but the memory fragmentation with the default allocation would be horrid
