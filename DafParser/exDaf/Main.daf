#cppInclude <vector>
#cppInclude <iostream>

#include "Counter.daf"

pub class MainClass implements CounterListener {
	m_counters:std::vector<&shared Counter>;

	pub MainClass() : m_counters({}) {
	}

	pub method AddCounter(counter:&shared Counter) {
		counter->SetFinishListener(this);
		counter->SetId(m_counters.size());
		m_counters.push_back(counter);
	}

	pub method RemoveCounter(id:usize) {
		m_counters.back()->SetId(id);
		m_counters[id] = m_counters.back();
		m_counters.pop_back(); //Look at the super noice O(1) complex removal of vector value
		if(m_counters.empty())
			#cpp
			std::cout << "No counters are left!" << std::endl;
			#endcpp
	}

	pub method CountAll(c:int) {
		for(let i:usize=0; i < m_counters.size(); i++) {
			m_counters[i]->Count(c);
		}
	}

	pub override method OnCounterFinish(id:usize) {
		#cpp
		std::cout << "The counter " << id << " named \"" << m_counters[id]->GetName() << "\" finished!" << std::endl;
		#endcpp
		RemoveCounter(id);
	}
}

pub func main() -> int {
	let mut mainClass:MainClass();
	let myCounter:&shared=new Counter(10, "Bolle");
	let secondCounter:&Counter=new Counter(5, "Balle");
	mainClass.AddCounter(myCounter);
	mainClass.AddCounter(secondCounter);
	mainClass.AddCounter(new Counter(12, "Bulle"));
	let c:Counter(7, "Belle");
	mainClass.AddCounter(DumbPointer(&mut c));
	for(let i:=0; i < 15; i++)
		mainClass.CountAll(1);
	
	return 0;
}