#+TITLE: Daf Syntax

This is a document detailing daf syntax and semantics, used to flesh out the more exiting language features

* Syntax & Semantics
** Functions
*** Return value
There are several ways of saying that a function should return a value, and then return it.
#+BEGIN_SRC daf
def noReturnType := () { println("Eyo!"); }; //Requires a following scope
def explicitReturnType := ():u8 { return 4; }; //Requires a following scopeas well
def returnExpression := (a:u8):u8 = 20u8+a;
def returnExpressionTypeInferred := ():= true;
def returnScope := ():= {6};
def ignoreScopeReturn := () {6};
#+END_SRC
So the possible grammars are:
 - () + scope
 - () + : + type + scope
 - () + : + type + = + expression
 - () + := expression
And only the grammars with colons actually return anything
** Compile time functions
A compile time function is also known as a def function, as it in reality is a parameterized def; merely an alias.
In theory, we can make a normal function inline by just removing the := between its name and its parameter list,
or appending def in front of its parameter list.
Example:
#+BEGIN_SRC daf
def func := (a:int) {
    println("Eyo!")(a);
};

def funcCmpTime(a:int) {
    println("Eyo!")(a);
};

def funcCmpTime2 := def(a:int) {
    println("Eyo!")(a);
};
#+END_SRC
*** Return value
defs follow the same rules for returning values as functions.
Usually one uses := and an expression, but there are cases where one might want to explicitly return void.
There is nothing wrong with using := to return void, so example 1 bellow is perfectly legal.
To maintain compatibility with functions, one can also shorten ':={' to just {, as seen in example 2.
This is assuming you don't wish to pass on anything returned by the scope. In which case add a colon and return type as in example 3. 
This might all seem convoluted, but saves you a lot of colons and equals signs in the long run.
#+BEGIN_SRC daf
def triple(a:int):=a*3;
//Example 1:
def useTriple := {   triple(30);   }; //No return type
//Example 2:
def useTriple2 {   triple(30)   }; //No return type here either
//Example 3:
def getTriple:int {   triple(40)   }; //Returns int 
#+END_SRC
