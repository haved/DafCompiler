
def malloc:(size:usize):[?]u8; //Foreign

def daf_array_alloc(T):=(size:usize):[]mut T {
	let array := malloc(usize.size_of + size*T.size_of);
	
};

typedef UncrtPrt(T) := class {
	mut m_ptr : &mut T;
	def _ := ctor(ptr : &mut T):This {
		m_ptr = ptr;
	}

	def initialize(move this:This, move t:T):= {
		//TODO: Tell compiler @m_ptr is uncertain		
		@m_ptr = t; //Now it's certain
		m_ptr
	};

	def initialize(move this:This, def val():T):= {
		//TODO: Tell compiler @m_ptr is uncertain
		@m_ptr = val;
		m_ptr
	};
};

def get_uncrt_ptr:=(uncrt a:int):&uncrt int {
	&uncrt a;
};

def useUncrtPointer:=() {
	let x:int;
	let b:=get_uncrt_ptr(uncrt x);
	let c = move b.initalize(5); //We can no longer use b
	
};