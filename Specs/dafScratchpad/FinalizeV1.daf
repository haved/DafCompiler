
def square(a:$T/Number):T=a*a;

def positive_mod(a:$T/Number, b:T):=(a%b+b)%b;

typedef ComplexNumber := class {
	mut length:f32;
	mut rot:f32;

	pub def _(rot:f32, length:f32):ctor This {
		this.rot = positive_mod(rot, 2*PI);
		this.length = length;
		if length < 0 {
			rot += rot > PI ? -PI : PI;
			length = -length;
		}
	};

	pub def square(this:&mut This):= This(rot*2, square(length)); //Overloading makes us use the previous definition of square
};

def main(args:[]string) {
	def mySquare = ComplexNumber.square;
	def mySquare |= square; //Overloading is my jam
	let a:=ComplexNumber(2*PI/4, 1);
	let b:=mySquare(a);
    let c:=b.square;
	println("4 squared: %  My complex number: %", mySquare(4), c);
};

def println(format:string, ...objs:Any) {
	mut objIndex:=0;
	for(0..format.len) {
		let letter := format[it];
		if(letter == '%') {
			//TODO: overflow
			print(objs[objIndex]);
			objIndex++;
		} else puts(letter);
	}
};

def print(object:Any) {
	def typeInfo := object.typeInfo;
	def ptr := object.instance;
	namedef _ := TypeInfo.Types;
	match(typeInfo) { //We'll do match later
		I32: print(@(ptr as &i32));
		
	}
};

def eyo {
	def a := (def b:(b:i32)) {
		b(a);
	};
};


typedef something := class {
	
};
