namedef DC := Compiler;

def build:=(args:[]string) {
		DC.beginExecutable("DartScorer");
		DC.addSourcePath("src/");
		DC.compile("Main");
		//DC.run(); //I'll have to find out how this will link libraries
		DC.outputExecutable();
		DC.end();
};

/*
def buildLib:=(args:[]string):int {

		// ============== Begin Compiler
		DC.beginLibrary("lib/myLib", "include/");
		//DC.beginSharedLibrary("lib/myLib", "1.5", "1", "include/");
		//These are the easiest ways of making a library, as the others require a setting stage

		// ============= Add libraries and source paths
		DC.addLibrary("otherLib"); //its include path
		DC.addSourcePath("src/"); //as a search path were the source is included in the final file

		// ============= Compile if changes have occured
		if(DC.storeState("LastCompile.txt")) {
		    DC.compile("me.haved.MyFile"); //Recursive goodness
				//After a compile, we can't change any output settings
				DC.cleanLibraryLinking(); //We're not linking otherLib in our lib
				DC.outputLibrary();
		}
		DC.end(); //Causes to compiler to forget everything parsed here
		0
};
*/