#+TITLE: The Daf Grammar

This document details all the grammar currently in the compiler, with descriptions.
I'm, trying to use Backus-Naur Form, but I'll primarily focus on readability and not correctness.
This means I won't bother with <tag markers> all over.

* Parameters and Arguments
A big part of both functions and definitions is the parameter list,
not to be confused with an argument list. They are both similar and detailed here.
Note that not all constructs allow you to use all the parameter or argument types.
#+BEGIN_SRC BNF
<normal-parameter-base>   ::= *identifier* ":" type
<normal-parameter-prefix> ::= "mut" | "move" | "uncrt"
<normal-parameter-wo-own>  ::= normal-parameter-prefix normal-parameter-base
<normal-parameter>   .  .  ::= normal-parameter-wo-own | "own" normal-parameter-wo-own
<type-parameter> ::= type
<def-parameter>  ::= def-base
<parameter> .  .  .  .  .  .  .  ::= normal-parameter | type-parameter | def-parameter 
<parameter-chain> ::= parameter
  .  .  .  .  .  .  | parameter "," parameter-chain
<parameter-list>  ::= "(" ")"
  .  .  .  .  .  .  | "(" parameter-chain ")"
<optional-param-list> ::= parameter-list
  .  .  .  .  .  .  .   | 
#+END_SRC
* Definitions
** TODO Add linkfile and namedef to the compilers definition parser
** General definition
#+BEGIN_SRC BNF
<definition-choice>   ::= let | def | typedef | namedef | with_def | linkfile
<definition>          ::= definition-choice ";"
<global-definition>   ::= "pub" definition | definition
<global-definition-list> ::= global-definition
   .   .   .   .   .   .   | global-definition global-definition-list
#+END_SRC
** Shared between let & def
#+BEGIN_SRC BNF
<deflet-expl-impl> ::= ":" type " = " expression | " := " expression
#+END_SRC
** Let
#+BEGIN_SRC BNF
<let-step1> ::= "let" | "let" "mut" | "mut"
<let-step2> ::= let-step1 *identifier*
<let>       ::= let-step2 deflet-expl-impl
#+END_SRC
*** Example use
#+BEGIN_SRC daf
let a := 20
let mut b : u8 = 50
mut c : bool = true
#+END_SRC
** Def
#+BEGIN_SRC BNF
<def-1-keywords> ::= "def"
  .  .  .  .  .  . | "def" let-step1
<def-2-once>  .  ::= def-1-keywords
  .  .  .  .  .  . | def-1-keywords "once"
<def-base>  ::= def-2-once *identifier* optional-param-list
<def-expl-impl>  ::= def-base deflet-expl-impl
<def-scope>   .  ::= "def" *identifier* optional-param-list scope
<def-onlyType>   ::= def-base ":" type
<def-ret-scope>  ::= def-onlyType scope
<def>   .  .  .  ::= def-expl-impl | def-scope | def-onlyType | def-ret-scope
#+END_SRC
*** Example:
#+BEGIN_SRC daf
def val : u8 = 20
def let mut some := b.g
def let once eyo:u8 { let a:=getIndex(); acc[a] }
def print { println("Hello"); }
#+END_SRC
*** TODO Add compile time parameters
*** TODO Add the special scope grammars to the compiler
** Typedef
#+BEGIN_SRC BNF
<typedef> ::= "typedef" *identifier* " := " type
#+END_SRC
*** Example:
#+BEGIN_SRC daf
typedef MyClass := int
typedef MyTrait := u8|i8|u16|i16
#+END_SRC
*** TODO Add compile time parameters
** Namedef
#+BEGIN_SRC BNF
<namedef> ::= "namedef" *identifier* " := " name-scope-expression
#+END_SRC
*** Example:
#+BEGIN_SRC daf
namedef io := { let a := 20; }
namedef b := some + other + { def a{}; }
#+END_SRC
*** TODO Add compile time parameters
** With (Definition)
Note that a with definition becomes an expression if you follow =<with_def>= with an expression, and not a semicolon
#+BEGIN_SRC BNF
<with_def> ::= "with" expression "as" type
  .   .   .  | "with" ":" type "as" type
#+END_SRC
*** Example
#+BEGIN_SRC daf
with val as u8
with :int as incrementable
#+END_SRC
* Expressions
** Primaries vs. Operators
The operators are parsed in order of their precedence in a recursive parseSideâ„¢ function.
The rules are not covered here, but some operators are. For instance, a function call is a postfix operator.
This list will therefore cover all the primary expressions, and the few Operators with special syntax.
** Primaries
#+BEGIN_SRC BNF
<number-literal> ::= *number-literal*
<string-literal> ::= *string-literal*
<char-literal>   ::= *char-literal*
<variable>   .   ::= *identifier*
<function>
#+END_SRC
** def-expression
* Statements
* Types
** classes
** def-expression-type

* Files and Scopes
** Name-scope-expressions
Namespaces are referenced through =name-scope-expressions=, or just by name when one identifier is enough.
The grammar is defined as such:
#+BEGIN_SRC BNF
<name-scope> ::= "{" global-definition-list "}"
<name-scope-expression> ::= *identifier*
  .  .  .  .  .  .  .  .  | name-scope
  .  .  .  .  .  .  .  .  | name-scope-expression "+" name-scope-expression
#+END_SRC
You can use the name of a namedef as a variable in an expression, but the actual parsing of name-scope-expressions only happens in a namedef.
Example:
#+BEGIN_SRC daf
namedef IO := { def print:(); };
def p := IO.print();
#+END_SRC
** Files
When parsing a file, the whole file is parsed as an =global-definition-list=, like in a =name-scope=, only without the ={= and =}=.
The file serves as a root for all references in a file, so even when one file is imported into another file, you'll have to import back to reference both ways. (Unless you pass compile-time parameters, that is)

