// I've been thinging about having ctor and dtor part of the parameters

typedef Vec3f := class {
	pub x,y,z:f32;
	pub def new:=(x_:f32, y_:f32, z_:f32):=ctor This{x_,y_,z_}; //Direct constructor
};

def constructVec(x_:f32, y_:f32, z_:f32):Vec3f {
	def _ := output;
	x = x_;
	y = y_;
	z = z_;
	//Now output is certain. Amazing
}

//Alternative
def makeVec3XY:=(x_:f32, y_:f32):= { //Type inferred, maybe better to be explicit
	let z_ := 0;
	ctor This {
		 x_,y_,z_
	}
};

def makePair(uncrt vec1:Vec3f, uncrt vec2:Vec3f) {
	with Vec3f as {
		def _ := (uncrt this:This, x:f32, y:f32, z:f32) {
			this.x = x;
			this.y = y;
			this.z = z;
			//this is no longer uncrt
		};
	} {
		 vec1(4,6,7);
		 vec1(6,7,8); //This'll call the and then the function
		 vec2(5,8,2);
	};
};

typedef UncrtPtr<T> := class {

	m_ptr:&mut T;

	pub def _ := ctor(own uncrt param:T):This { //ctor simply puts def _ := output on the top
		with param as certain;
		m_ptr = &mut param;
	}
};