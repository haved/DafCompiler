
typedef withCtor := class {
	pub mut a:str;
	def _ := (move? a:str):= This{move? a}; //Uses move ctor if move was given as input
	def reapString := (dtor this:This):= move a; //Uses move ctor to initialize output
	def getReference := (this:This):let=a;
};

def func:=(a:str) {
	print(a);
};

def func:=(mut a:str) {
	a.append("Hei");
	print(a);
};

def func:=(move a:str):str {
	return a; //Implicitly moves on a return, or uses even funkier Return Value Optimization
};

def main:=() {
	mut a := str("Hello");
	func(a);
	func(mut a); //Uses the mutable one
	//(a:str){}(mut a); //Illegal, as mut is impossible
	mut b := a; //Implicitly uses copy ctor
	mut c := move b; //Implicitly uses move ctor, complains if there is none

	let object := withCtor(str("Hei")); //We don't have an implicit conversion from [4]char to string
	let object2 := withCtor{_}; //Uses empty default ctor for string
};

