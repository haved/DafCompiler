typedef StringMaybeOwner := class with text:&mut String {
	mut pub owner := true;

	pub def alloc := (args..):ctor This if String._ instof (args..):String {
		text = alloc(String)(args..);
		owner = true;
	};

	pub def allocCopy := (a:This):ctor This {
		text = alloc(String)(a.text);
		owner = true;
	};

	pub def takeOwnership := (mut a:This):ctor This {
		text = a.text;
		owner = true;
		assert(a.owner);
		a.owner = false;
	};

	pub def reap := (dtor a:This):ctor This {
		text = a.text;
		owner = a.owner;
	};

	pub def reference := (a:&mut String) {
		text = a;
		owner = false;
	};

	pub def reference := (a:This):ctor This {
		text = a.text;
		owner = false;
	}

	pub def _ := (dtor a:This) {
		if owner
			free(text);
	};
};

def main := () {
    mut a := String("text");
	mut b := StringMaybeOwner.alloc("text2");
	mut c := StringMaybeOwner.takeOwnership(b);
	mut d := StringMaybeOwner.reference(&mut a);
	mut e := d.reap();
	c = b; //invokes dtor on c and then copy ctor

	mut funky := StringMaybeOwner.reap(StringMaybeOwner.takeOwnership(StringMaybeOwner.alloc(String("Hey")).reap())); //Uses move semantics for reap in both cases
	def other := {
		let a := StringMaybeOwner("hello");
		let b := a.reap();
		b
	};

	mut x := other;
	StringMaybeOwner(other); //Immediate destructing
	let y := StringMaybeOwner.reap(move x);
	let z := StringMaybeOwner.reap(move other); //How should be signify that this is in fact something you only can move from
};
