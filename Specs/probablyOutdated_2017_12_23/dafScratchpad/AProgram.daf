
namedef io := import("daf.io");

def main := () {
	//We are looking for the number of nodes we can mark in a tree, with no two marked nodes being closer than a given minimum distance.
	//The input is given as one int n, the number of nodes, one int d, the closest two marked nodes can be.
	//Then follows n-1 lines, starting at i=1 up to i=n-1, where the integer on the line, x, is the parent of node i,
    //We know x < i for any given line. Node 0 is thus the root

	let nodeCount := io.readInt();
	let minDist := io.readInt();

	typedef Node := class {
		pub parent:i32;
		pub distanceToRoot:i32;
		pub mut children:Vec(:i32);
		mut mut distanceToMarkBellow:i32;
		pub def _ := ():ctor This = This{-1,0,_,0};
		pub def _ := (parent:i32, distToRoot:i32) := This{parent, distToRoot, _, 0};
	};

    mut nodes := Vec.fillAndReserve(:Node, 1, def:=Node(), nodeCount);

	for(1..<nodeCount) {
		let parent := io.readInt();
		let parentDistToRoot := nodes[parent].distanceToRoot;
		nodes.push_back(Node(parent, parentDistToRoot+1));
		nodes[parent].children.push_back(it);
	}

	mut stack := Deque(:i32);
	stack.push_back(0); //The root

	for(0..<nodeCount)
		for(stack[it].children)
			stack.push_back(it);
	//Now the stack is sorted by row

	mut marks := 0;
	for(nodeCount-1..>=0) {
		def mut node := nodes[it];
		if(node.distanceToMarkBellow != 0)
			continue;

		mut genOver := 1;
		mut parent := node.parent;

		while(parent != -1) {
			def parentN := nodes[parent];
			if(parentN.distanceToMarkBellow + genOver >= minDist) {
				marks++;
				mut tripTwo := node.parent;
				mut dist := 1;
				while(tripTwo != -1 && dist < minDist) {
					if(nodes[tripTwo] == dist)
						break;
					nodes[tripTwo] = dist;
					tripTwo = nodes[tripTwo].parent;
					dist++;
				}
			} else if(parentN.distanceToMarkBellow != 0) { //We're too close to a marking, and should mark the parent branches up to it as shit
				mut tripTwo := node.parent;
				while(tripTwo != parent) {
				    nodes[tripTwo].distanceToMarkBellow = -1;
					tripTwo = nodes[tripTwo].parent;
				}

			} else {
				parent = parentN.parent;
				genOver++;
				continue;
			}
			break;
		}
	}

	io.print(marks);
};
