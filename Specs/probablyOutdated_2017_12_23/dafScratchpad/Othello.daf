
typedef Board := class {
	dimensions : i32;
	data : []char;

	def new(dimensions:i32):ctor This {
		this.dimensions = dimensions;
		data = alloc([]char, dimensions*dimensions);
		fill(data.begin, data.end, '_');
	};

	def _(dtor this) {
		free(data);
	};

	pub def initCross(this, X:char, O:char) {
		for x := dimensions/2-1 to dimensions/2
			for y := dimensions/2-1 to dimensions/2
				setTile(x, y, (x+y)%2 ? X : O);
	};

	def get(this, x:i32, y:i32):mut =data[x+y*dimensions];

	def getOrNone(this, x:i32, y:i32):Optional(char)=
		x<0||x>=dimesion||y<0||y>=dimension ? None : Some(get(x,y));

	def setTile(this, x:i32, y:i32, value:char) { get(x,y)=value; };

	pub def printBoard(this) {
		print("#");
		for x := 0 until dimensions
			print("|")(x+1);
		println("|#");

		for y := 0 until dimensions {
			print("%|", 'A'+y as char);
			for x := 0 until dimensions
				print("%|", get(x,y));
			println("#");
		}

		for 0 until dimensions+1
			print("# ");
		println("#");
	};

	pub def anyLegalMoves(this, player: char):bool {
		for x := 0 until dimensions
			for y := 0 until dimensions
				if placeTile(x, y, player, dummy: true)
					return true;
		false
	};

	pub def placeTile(this, x:i32, y:i32, player:char, dummy:bool=false):bool {
		mut result := false;
		for dx := -1 to 1
			for dy := -1 to 1
				if {x,y}.map(abs).sum != 0
					result |= flipInDirection(x, y, dx, dy, player, dummy);

		if result && !dummy
			setTile(x, y, player);
		
		result
	};

	def flipInDirection(x:i32, y:i32, dx:i32, dy:i32, player:char, dummy:bool=false):bool {
		mut possible := false;
		let tile := getOrNone(x+dx, y+dy) match
			Some => it as char,
			_ => return false;

		if tile == player || tile == '_'
			return false;

		mut dist := 1;
		while true {
			dist++;
			let tile := getOrNone(x+dx*dist, y+dy*dist) match
				Some => it as char,
				_ => return false;
			if tile == '_'
				return false;
			if tile == player
				break;
		}

		//We now know it's possible

		if dummy
			return true;

		while dist > 1 {
			dist--;
			setTile(x+dx*dist, y+dy*dist, player);
		}

		true
	}

	def countWinner():char {
		mut counts : [256]i32 = makeArray([256]i32, 0);
		mut highest := 0;
		mut highestIndex := '\0';

		for 0 until dimensions*dimensions {
			let tile := data[it];
			if tile == '_'
				continue;
			if(++counts[tile] > highest) {
				highest = counts[tile];
				highestIndex = tile;
			}
		}

		return highestIndex;
	};
};

def main {
	let X := 'X', O := 'O';
	let XO := {:char, X, O};

	let board := Board(8);
	board.initCross(X, O);

	mut turn := 0;
	mut skips := 0;
	while true {
		board.printBoard();

		turn++;
		let player := XO[turn%2];
		if(!board.anyLegalMove(player)) {
			print("Skipping player %'s (%) turn", turn%2+1, player);
			skips++;
			if(skips >= 2)
				break;
			continue;
		}
		skips = 0;

		while true {
			print("%: It's player %'s (%) turn: ", turn, (turn%2)+1, player);
			let line := inputLine(); //Without newline
			if line.length < 2
				continue
			let l := line.at(0);
			let n := line.at(line.size-1);

			let coord := LetterNumberToXY(l, n) match
				Some => it as pair(i32,i32),
				_ => continue;

			if(board.placeTile(coord.first, coord.second, player))
				break;
		}
	}

	let winner := board.countWinner();
	print("Game is over: Winner is %", winner);
};

def LetterNumberToXY(letter:char, number:char):Optional(pair(i32,i32))= {
	let x := number-'1';
	let y := letter-'A';
	if x < 0 || x > 8 || y < 0 || y > 8
		return None;
	Some(pair(i32,i32){x, y})
};
