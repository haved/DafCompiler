#+TITLE: Compiler development TO DO

* TO DO: Parsing
** TO DO: Definitions
*** Let
*** Def
*** Typedef
*** TO DO: Namedef
*** TO DO: With
*** TO DO: Linkfile
** TO DO: Statements:
*** If
*** For
*** While
*** Return
*** TO DO: Break
*** TO DO: Retry
*** TO DO: Continue
*** Definitions
*** Expressions
**** Scopes
** All expressions
*** Number literals
*** String literals
*** Char literals
*** Variables
*** Functions
*** Operators
**** Function calls
**** Array access
*** Scopes
** TO DO: Special types
*** TO DO: Class and trait definitions
*** TO DO: Merged types
* TO DO: Reference resolving
** TO DO: Avoid recursion
* TO DO: Type inference
** TO DO: Type checks for operators
** TO DO: Type checks for calls
** TO DO: Using proper type in overloading
* TO DO: Method checks
** TO DO: Using proper values
*** TO DO: Mutability checks
** TO DO: Proper return values?
** TO DO: Uncertainty
* TO DO: Code gen

* More general stuff:
** Add /isize/
** Error recovery in statements, where only some statements require semicolons
I'd rather not have multiple errors in the console for one misplaced word, but it's low priority
As far as I can remember the error recovery for statements is simply a TO DO
** Find out why the expression parser loop forever when a strange token is found
*** It probably lacks error recovery, maybe even with a TO DO
** Indent stuff to one tab instead of two spaces
** Handle TODO in all files
** Use more enum classes and keep global scope nice
** Update tokes (remove dumb, make uncrt, ctor, dtor etc.)
