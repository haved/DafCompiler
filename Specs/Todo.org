#+TITLE: Compiler development TO DO

* TODO Parsing
** TODO Definitions
*** Let
*** Def
*** Typedef
*** TODO Namedef
*** TODO With
*** TODO Linkfile
** TODO Statements:
*** If
*** For
*** While
*** Return
*** TODO Break
*** TODO Retry
*** TODO Continue
*** Definitions
*** Expressions
**** Scopes
** All expressions
*** Number literals
*** String literals
*** Char literals
*** Variables
*** Functions
*** Operators
**** Function calls
**** Array access
*** Scopes
*** TODO With
** TODO Special types
*** TODO Class and trait definitions
*** TODO Merged types
* TODO Reference resolving
** TODO Avoid recursion
* TODO Type inference
** TODO Type checks for operators
** TODO Type checks for calls
** TODO Using proper type in overloading
* TODO Method checks
** TODO Using proper values
*** TODO Mutability checks
** TODO Proper return values?
** TODO Uncertainty
* TODO Code gen

* More general stuff:
** Add /isize/ type
** Error recovery in statements, where only some statements require semicolons
I'd rather not have multiple errors in the console for one misplaced word, but it's low priority
As far as I can remember the error recovery for statements is simply a TODO
** Find out why the expression parser loop forever when a strange token is found
*** It probably lacks error recovery, maybe even with a TODO
** Indent stuff to one tab instead of two spaces
** Handle TODO in all files
** Use more enum classes and keep global scope nice
*** Done for Postfix operators
** Update tokes (remove dumb, make uncrt, ctor, dtor etc.)

** What happened to the function parameters??
** Rethink internal type representation
*** What about expressions
** Consider putting With in the definition and expression parsers
*** Have a special case for statements
** Use /override/ more for AST subclasses etc.
