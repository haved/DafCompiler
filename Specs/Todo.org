#+TITLE: Compiler development TO DO

* TODO Parsing
** TODO Definitions
*** Let
*** Def
*** DONE Typedef
	CLOSED: [2017-02-07 Tue 23:00]
*** TODO Namedef
*** DONE With
	CLOSED: [2017-02-07 Tue 16:53]
*** TODO Linkfile
** DONE Statements:
   CLOSED: [2017-02-10 Fri 13:34]
*** If
*** For
*** While
*** Return
*** DONE Break
	CLOSED: [2017-02-07 Tue 16:53]
*** DONE Retry
	CLOSED: [2017-02-07 Tue 16:53]
*** DONE Continue
	CLOSED: [2017-02-07 Tue 16:53]
*** Definitions
*** Expressions
**** Scopes
** TODO All expressions
*** Number literals
*** String literals
*** Char literals
*** Variables
*** Functions
*** Operators
**** Function calls
**** Array access
*** Scopes
*** DONE With
	CLOSED: [2017-02-07 Tue 18:33]
**** DONE With else
	 CLOSED: [2017-02-10 Fri 12:41]
*** TODO Match
** TODO Types
*** Typedef reference
*** TODO Primitive types
**** TODO Numbers
**** TODO Pointers
**** TODO Arrays
*** TODO Class and trait definitions
*** TODO Merged types
* TODO Reference resolving
** TODO Avoid recursion
* TODO Type inference
** TODO Type checks for operators
** TODO Type checks for calls
** TODO Using proper type in overloading
* TODO Method checks
** TODO Using proper values
*** TODO Mutability checks
** TODO Proper return values?
** TODO Uncertainty
* TODO Code gen

* More general stuff:
** TODO Add /isize/ type
** DONE Error recovery in statements, where only some statements require semicolons
   CLOSED: [2017-02-10 Fri 13:34]
I'd rather not have multiple errors in the console for one misplaced word, but it's low priority
As far as I can remember the error recovery for statements is simply a TODO
** DONE Find out why the expression parser loop forever when a strange token is found
   CLOSED: [2017-02-10 Fri 13:36] I was right, it did lack that
*** It probably lacks error recovery, maybe even with a TODO
** TODO Indent stuff to one tab instead of two spaces
** TODO Handle TODO in all files
** TODO Use more enum classes and keep global scope nice
*** Done for Postfix operators
** DONE Update tokes (remove dumb, make uncrt, ctor, dtor etc.)
   CLOSED: [2017-02-08 Wed 09:09]
** DONE What happened to the function parameters??
   CLOSED: [2017-02-08 Wed 09:09]
** TODO Rethink internal type representation
*** What about expressions
** DONE Consider putting With in the definition and expression parsers
   CLOSED: [2017-02-10 Fri 13:37] Considered and decided against. See WithParser.hpp and the implementation file. It's nice enough
*** DONE Have a special case for statements
	CLOSED: [2017-02-10 Fri 13:38] Done through a class that contains a pointer to either a WithExpression or a WithDefinition, returned by a general parser
** TODO Use /override/ more for AST subclasses etc.
** DONE Use two pointers in EitherWith
   CLOSED: [2017-02-10 Fri 13:55]
Instead of one void pointer and a bool isExpression, have a WithExpression pointer and a WithDefinition pointer, and then simply assert one of them is always null.
** TODO Search for string references and remove slow copies
** TODO Make compiler errors lowercase and remove punctuation
** TODO Check if having a TypeReference object is really necessary
** DONE See if one couldn't make the Definition parser and Expression parser more similar
   CLOSED: [2017-02-08 Wed 15:45]
As in ordering of functions found in both. Purely for consistency's sake.
** TODO Check consistency between Expression and Statement parser
** TODO Fix Error recovery to avoid loops and stuff. Use it in the Statement and Scope parsers
** TODO Maybe clean up the Statement parser, as 'with' somewhat duplicates expression code
** TODO Add move - prefix operator
** TODO Add uncrt - prefix operator
** DONE Add mut as possible prefix for function call arguments
   CLOSED: [2017-02-08 Wed 14:27]
