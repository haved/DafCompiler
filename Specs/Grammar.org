#+TITLE: The Daf Grammar

This document details all the grammar in the compiler currently, with descriptions of semantics.
I'm, trying to use Backus-Naur Form, but I'll primarily focus on readability and not correctness.
This means I won't bother with <tag markers> all over.

* The wanted grammar
** Definitions
*** TODO
    Add linkfile and namedef to the definition parser
#+BEGIN_SRC BNF
<definition-choice>   ::= let | def | typedef | namedef | linkfile
<definition>          ::= definition-choice ";"
<global-definition>   ::= "pub" definition | definition
#+END_SRC
*** Let
#+BEGIN_SRC BNF
let-step1 ::= "let" | "let" "mut" | "mut"
let-step2 ::= let-step1 *identifier*
let       ::= let-step2 ":" type " = " expression
 .  .  .  . | let-step2 " := " expression
#+END_SRC
**** Example use
#+BEGIN_SRC daf
let a := 20;
let mut b : u8 = 50;
mut c : bool = true;
#+END_SRC
*** Def
 - defStep1: /def/ + letStep1
 - defStep1: /def/ + letStep1 + /once/
 - defStep2: defStep1 + *identifier*
*** Typedef
*** With
** Expressions
 - expression: primary
 - expression: expression + infix op + expression
 - expression: prefix op + expression
 - expression: expression + postfix op
  - These operator grammars are parsed using parseSide and custom merges. This handles precedence, not covered in this document
 - 
** Statements
** Types
