#+TITLE: The Daf Book
#+AUTHOR: haved

* Introduction
I'm writing this long before the language is finished, not to speak of the compiler.
My hope is that I through this "book" will flesh out the language to its version 1.
I'm not forcing myself to stick to it, if something better comes along, but I want to at the very least work towards something that would work.
Most books with titles like this one are written as tutorials. When writing this, very little conscious effort is made towards any such goal.

* A basic program
Following is a daf program outputting a line with the infamous "Hello World!" string to standard output.
#+BEGIN_SRC daf
namedef IO := import("daf.IO");

def main() {
    IO.println("Hello World!");
};
#+END_SRC
The first line defines =IO= to be a NameScope, which is an unordered block with definitions.
You can but a block of definitions after the ~:=~, or in this case they are imported from elsewhere.
A file is parsed as a NameScope, meaning you import other files as if they were NameScopes.
These definitions can then be referenced from outside the NameScope, seen here as =IO.println=.
Because a NameScope is a list of definitions, and a file is parsed as a NameScope, all top level constructs are definitions.
Luckily there are only five of them.
** Definitions
#+BEGIN_SRC daf
namedef myNamespace := {};
typedef myInt:=i32;
def myFunc() := 6;
let myVariable :myInt=6;
with :i32 as Number;
#+END_SRC
Each of these can be top level constructs in files or in NameScopes (the same thing, remember).
You may also prefix the definition with the =pub= keyword to make them accessible from outside the NameScope they are defined in.
For example:
#+BEGIN_SRC daf
namedef myNamespace := {
    pub def getWorld() := "World";
};

def main() {
    IO.print("Hello, ");
	IO.println(myNamespace.getWorld());
};
#+END_SRC
Definitions don't have to be in NameScopes, though. Regular ordered scopes consist of a list of statements, but an definition also works as a statement.
For instance, a namespace can be defined inside a scope, like in the following example:
#+BEGIN_SRC daf
def main() {
    namedef IO := import("daf.IO");
	IO.println("Nice");
};
#+END_SRC
There are some extra limitations when you put definitions in a scope, mainly that since Scopes are ordered, you have to make the definition above where you reference it.
You may also not reference the definitions outside the scopes they are defined in. You're not even allowed to put =pub= in front of them.

