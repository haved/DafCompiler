In this document, a scope is the set of tokens between either '(' and ')', '{' and '}' or '[' and ']'
Skipping over scopes means you, upon advancing past '(', end up on the token after ')'
When anything fails during syntax parsing, it it your job to print the error
When anything fails, it will exit any scope it has started, and then return.
It's your callers job to handle you being a fail
The only time one skips to get a hopefully clean start, is after a broken definition.
It is ok to not be broken (none), even though some part of your syntax is broken.
The program will terminate anyways, after the syntax parsing, if errors were thrown.
We want as few, but as good error messages a possible.

   "If a parsing function returned none, the lexer will not be in a different scope to when you started"
   "It may be at EOF, but you only print about meeting EOF once!"
   "If scopes end in the wrong order, everything goes to shit"

One day, improve all uses of expectToken to tell you what you were parsing at that moment.
Maybe keep two previous tokens in the lexer, to print better error messages, when a token is expected.
